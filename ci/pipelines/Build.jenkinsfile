def channel = "testing"
def version = "0.0.0"
def packageName = "DbPostgreSQLAdapter"
def testApplication = "DbPostgreSQLAdapterTest"

library identifier: "cpp-jenkins-pipelines@master", retriever: modernSCM(
  [$class: "GitSCMSource",
   remote: "https://github.com/systelab/cpp-jenkins-pipelines.git",
   credentialsId: "GitHubCredentials"])	
   
pipeline
{
	agent
	{
		label 'lib-build'
	}

	parameters
	{
		booleanParam( name: 'uploadTestingPkg',
					  description: 'Whether or not to upload testing conan package',
					  defaultValue: false )
	}

	options
	{
		skipDefaultCheckout(true)
		disableConcurrentBuilds()
		buildDiscarder(logRotator(numToKeepStr: '5'))
	}

	stages
	{
		stage('Checkout')
		{
			steps
			{
				deleteDir()
				checkoutSourceCode()
			}
		}
		
		stage('Build')
		{	
			steps
			{
				script
				{
					def configurations = ['Debug', 'Release']
					for(int i=0; i < configurations.size(); i++)
					{
						stage('Build ' + configurations[i])
						{
							bat "mkdir build-${configurations[i]}"
							dir("build-${configurations[i]}")
							{
								bat "conan install .. --profile ../conan.profile -s build_type=${configurations[i]}"
								bat "cmake .. -G \"Visual Studio 17 2022\" -A x64"
								bat "cmake --build . --config ${configurations[i]}"
								bat "conan export-pkg .. ${packageName}/${version}@systelab/${channel} --profile ../conan.profile -s build_type=${configurations[i]} --force"
								bat ".\\bin\\${configurations[i]}\\${testApplication}.exe --gtest_output=xml:${testApplication}.xml"
							}
						}
					}
				}
			}
		}

		stage('Deploy')
		{
			when
			{
				expression { return params.uploadTestingPkg }
			}
			steps
			{
				script
				{
					bat "conan remove ${packageName}/${version}@systelab/${channel} -r systelab-conan-local --force"
					bat "conan upload ${packageName}/${version}@systelab/${channel} --all -r systelab-conan-local --force"
				}
			}
		}
	}

	post
	{
		always
		{
			junit allowEmptyResults: true, testResults: "build*/${testApplication}.xml"
		}
	}
}
