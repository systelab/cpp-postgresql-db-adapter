def channel = "testing"
def version = "0.0.0"
def packageName = "DbSQLiteAdapter"
def testApplication = "DbSQLiteAdapterTest"

library identifier: "cpp-jenkins-pipelines@master", retriever: modernSCM(
  [$class: "GitSCMSource",
   remote: "https://github.com/systelab/cpp-jenkins-pipelines.git",
   credentialsId: "GitHubCredentials"])
   
pipeline
{
	agent
	{
		label 'lib-build'
	}

	parameters
	{
        string(	name: 'version',
				description: 'Number of the version to build (must match the name of the tag that will be checked out)',
				defaultValue: '0.0.0' )

		booleanParam( name: 'stable',
					  description: 'Show if generated library should be uploaded as stable or testing',
					  defaultValue: false )
	}

	options
	{
		skipDefaultCheckout(true)
		disableConcurrentBuilds()
	}

	stages
	{
		stage('Checkout')
		{
			steps
			{
                script 
				{
					version = params.version
					channel = params.stable ? "stable" : "testing"
				}
				deleteDir()
				checkoutSourceCodeFromTag(version)
			}
		}
		
		stage('Build')
		{	
			steps
			{
				script
				{
					def configurations = ['Debug', 'Release']
					for(int i=0; i < configurations.size(); i++)
					{
						stage('Build ' + configurations[i])
						{
							bat "mkdir build-${configurations[i]}"
							dir("build-${configurations[i]}")
							{
								bat "conan install .. --profile ../conan.install.profile -s build_type=${configurations[i]}"
								bat "cmake .. -G"
								bat "cmake --build ${configurations[i]}"
								bat "conan export-pkg .. ${packageName}/${version}@systelab/${channel} -s build_type=${configurations[i]}--force"
								bat "bin/${configurations[i]}/${testApplication}.exe --gtest_output=xml:${testApplication}.xml"
							}
						}
					}
				}
			}
		}

		stage('Deploy')
		{
			steps
			{
				script
				{
					bat "conan remove ${packageName}/${version}@systelab/${channel} -r systelab-conan-local --force"
					bat "conan upload ${packageName}/${version}@systelab/${channel} --all -r systelab-conan-local --force"
				}
			}
		}
	}

	post
	{
		always
		{
			junit allowEmptyResults: true, testResults: "build*/${testApplication}.xml"
            script
			{
				currentBuild.description = "${version}/${channel}"
			}
		}
	}
}
